---
#=====
# File: 
# playbooks/cosmic_seed.yml
# Description: create an ASP
#
# Author: 
#  - Derek 'dRock' Halsey
# Example:
#=====

- name: PLAYBOOK | cosmic_seed.yml - Initiate Cosmic Seed
  hosts: localhost
  gather_facts: false

#-----
# Create Base VMs
# Create the new VMs and configure networking and hostname
# VM variable files should be configured in host_vars folder
# VMs should be defined in the inventories/[inventorory name] file
#
# hyper_v_clustered_instance dict defined in
# enviornment/group_vars/all/hyper_v_clustered_instance.yml
#-----

- name: Ensure VM exists
  hosts: "{{ variable_host }}"
  connection: local
  gather_facts: false
  roles: [ hyper_v_clustered_instance ]
  tags:
  - spawn
  - newVm

#-----
# Inital Linux Setup
#
# linux_setup dict defined in
# enviornment/group_vars/linux/linux_setup.yml
#-----

- name: Initial Linux Setup
  hosts: "{{ variable_host }}"
  gather_facts: false
  roles: [ linux_setup ]
  tags:
  - setup
  - newVm

#-----
# Configure Storage
#
# add_partiton dict defined in
# enviornment/group_vars/linux/add_partition.yml
#-----
- name: ROLE | Ensure correct number of partitions and assign additional disk space to the last partition
  hosts: "{{variable_host }}"
  gather_facts: false
  roles: [ add_partition ]
  tags:
  - newVm
  - storage

#-----
# Stop and disable the NetworkManager and firewalld
#-----
- name: SERVICE | Stop and disable the NetworkManager and firewalld
  hosts: "{{variable_host }}"
  gather_facts: false
  tasks:
  - become: true
    become_user: root
    service:
      name: "{{ item }}"
      state: stopped
      enabled: no
    with_items:
    - NetworkManager
    - firewalld
  tags:
  - newVm
  - services

- name: FILE | Ensure Directory is present for repositories
  hosts: ["binary-servers:jenkins-plugin-servers:yum-servers:pip-servers:&{{ variable_host }}"]
  gather_facts: false
  tags:
  - newVm
  tasks:

  - become: true
    become_user: root
    file:
      path: /u01/repo
      owner: root
      group: root
      state: directory
      mode: 'u=rwx,g=rwx,o=rx'

#-----
# Create cifs mounts
#
# add_partiton dict defined in
# enviornment/group_vars/redhat/cifs_client.yml
#-----

- name: ROLE | Use cifs_client role to create cifs mounts on the hosts
  hosts: "{{ variable_host }}"
  gather_facts: false
  roles: [ cifs_client ]
  tags:
  - newVm
  - cifs

#-----
# Write a note about copying in the package binaries
#-----
- name: PLAY | Wait for repositories to be manually copied to the binary, jenkins-plugin, yum, and pip servers
  hosts: localhost
  gather_facts: false
  tags:
  - wait
  tasks:

  - pause:
      prompt: "Pause | Please manually copy 'binaries', 'epel-6', 'epel-7', 'itcc-6', 'itcc-7', 'packages', 'pypi-packages', 'jenkins_plugins', 'rhel-6-server-rpms' and 'rhel-7-server-rpms' directories to /u01/repo"

#-----
# Apply Nexus Server role
# NOTE: Your inventory should define relevant nexus role variables in group_vars
# with the exception of the 2 passwords below, which should be defined in your
# vault and mapped in as shown below.
#-----
- name: PLAY | Apply the nexus server role
  hosts: ["{{variable_host }}:&nexus-servers"]
  become: true
  gather_facts: true
  roles: [ ansible_nexus_oss ]
  tags:
  - nexusServer

#-----
# Apply maven role
#-----
- name: PLAY | Apply the maven role
  hosts: ["{{ variable_host }}:&maven-clients"]
  become: true
  gather_facts: true
  roles: [ ansible_role_maven ]
  tags:
  - maven

#-----
# Apply maven nexus config role
#-----
- name: PLAY | Apply the maven nexus config role
  hosts: ["{{ variable_host }}:&maven-clients"]
  become: true
  gather_facts: true
  roles: [ ansible_role_maven_nexus_config ]
  tags:
  - mavenNexus

#-----
# Apply pip nexus config role
#-----
- name: PLAY | Apply the pip nexus config role
  hosts: ["{{ variable_host }}:&pip-clients"]
  become: true
  gather_facts: true
  roles: [ ansible_role_pip_nexus_config ]
  tags:
  - pipNexus

#-----
# Apply Binary Server role
#-----
- name: PLAY | Apply the binary_server role to seup a custom binary repository
  hosts: ["{{variable_host }}:&binary-servers"]
  gather_facts: false
  roles:
  - role: binary_server 
    when: host.server_repos.binary is defined
  tags:
  - binaryServer

#-----
# Apply Yum Server role
#-----
- name: PLAY | Apply the yum_server role to seup a custom YUM repository
  hosts: ["{{variable_host }}:&yum-servers"]
  gather_facts: false
  roles: 
  - role: yum_server
    when: host.server_repos.yum is defined
  tags:
  - yumServer

#-----
# Configure new VMs to get YUM updates from repo01
# Perform update of OS packages
#-----
- name: PLAY | Configure yum client and update systems
  hosts: ["{{variable_host }}"]
  gather_facts: false
  roles:
  - yum_client
  - yum_update
  tags:
  - yumClient

#-----
# Configure ntp
#-----
- name: ROLE | Configure NTP
  hosts: ["{{variable_host }}"]
  gather_facts: false
  roles: [ ntp ]
  tags:
  - ntp

#-----
# Configure git server
#-----
- name: PLAY | Configure Git Server
  hosts: ["{{variable_host }}:&git-servers"]
  gather_facts: false
  roles: 
  - role: git_server
    when: host.server_repos.git is defined and host.server_repos.git == true
  tags:
  - gitServer

#-----
# Configure ansible controller
#-----
- name: PLAY | Configure ansible controller
  hosts: ["{{variable_host }}:&ansible-controllers"]
  gather_facts: false
  roles: [ ansible_controller ]
  tags:
  - ansibleController

#-----
# Configure a host to act as a Jenkins Server
#  
#  - installs plugins by fetching from a Jenkins update center (e.g. the host
#    configured by the previous play.
#  - recommended plugins are provided below and can easily be tuned by adding or
#    removing to/from the list below
#-----
- name: PLAY | Configure Jenkins Server
  hosts: ["{{variable_host }}:&jenkins-servers"]
  gather_facts: true
  roles: [ jenkins_server ]
  tags:
  - jenkinsServer

#-----
# Configure Jenkins Slaves
# At a minimum, we want the ansible controller to be a slave to Jenkins such
# that playbooks can be triggered in various pipelines.
#-----
- name: PLAY | Configure Jenkins Slaves
  hosts: ["{{variable_host }}:&ansible-controllers"]
  gather_facts: true
  roles: [ jenkins_slave ]
  tags:
  - jenkinsSlaves

#-----
# Configure a CA server to act as a central CA for everything
#-----
- name: PLAY | Configure CFSSL CA Server
  hosts: ["{{variable_host }}:&certificate-authority-servers"]
  gather_facts: false
  roles: [ cfssl_ca ]
  tags:
  - cfsslCaServer
#-----
# Test CSR generation and signature by CA
# NOTE: This is only an example of getting a certificate from the CA for the
# Ansible server.  It shouldn't be needed for anything operational, but is a
# good example for other playbooks/plays (e.g. big_bang) that may need to
# request/install certs.
#-----
#- name: PLAY | Get some serts for Ansible
#  hosts: ["{{variable_host }}:&ansible-controllers"]
#  gather_facts: false
#  tags:
#  - cfsslEndpoint
#  roles:
#  - role: cfssl_endpoint

